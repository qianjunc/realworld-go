// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/qianjunc/realworld-go/ent/article"
	"github.com/qianjunc/realworld-go/ent/comment"
	"github.com/qianjunc/realworld-go/ent/predicate"
	"github.com/qianjunc/realworld-go/ent/tag"
	"github.com/qianjunc/realworld-go/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle = "Article"
	TypeComment = "Comment"
	TypeTag     = "Tag"
	TypeUser    = "User"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	slug                   *string
	title                  *string
	description            *string
	body                   *string
	createdAt              *string
	updatedAt              *string
	favoriteCount          *int
	addfavoriteCount       *int
	clearedFields          map[string]struct{}
	articleAuthor          *int
	clearedarticleAuthor   bool
	favorited              map[int]struct{}
	removedfavorited       map[int]struct{}
	clearedfavorited       bool
	articleComments        map[int]struct{}
	removedarticleComments map[int]struct{}
	clearedarticleComments bool
	tags                   map[int]struct{}
	removedtags            map[int]struct{}
	clearedtags            bool
	done                   bool
	oldValue               func(context.Context) (*Article, error)
	predicates             []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id int) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSlug sets the "slug" field.
func (m *ArticleMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *ArticleMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *ArticleMutation) ResetSlug() {
	m.slug = nil
}

// SetTitle sets the "title" field.
func (m *ArticleMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ArticleMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ArticleMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *ArticleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ArticleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ArticleMutation) ResetDescription() {
	m.description = nil
}

// SetBody sets the "body" field.
func (m *ArticleMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *ArticleMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *ArticleMutation) ResetBody() {
	m.body = nil
}

// SetCreatedAt sets the "createdAt" field.
func (m *ArticleMutation) SetCreatedAt(s string) {
	m.createdAt = &s
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *ArticleMutation) CreatedAt() (r string, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCreatedAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *ArticleMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *ArticleMutation) SetUpdatedAt(s string) {
	m.updatedAt = &s
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *ArticleMutation) UpdatedAt() (r string, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldUpdatedAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *ArticleMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetFavoriteCount sets the "favoriteCount" field.
func (m *ArticleMutation) SetFavoriteCount(i int) {
	m.favoriteCount = &i
	m.addfavoriteCount = nil
}

// FavoriteCount returns the value of the "favoriteCount" field in the mutation.
func (m *ArticleMutation) FavoriteCount() (r int, exists bool) {
	v := m.favoriteCount
	if v == nil {
		return
	}
	return *v, true
}

// OldFavoriteCount returns the old "favoriteCount" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldFavoriteCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFavoriteCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFavoriteCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFavoriteCount: %w", err)
	}
	return oldValue.FavoriteCount, nil
}

// AddFavoriteCount adds i to the "favoriteCount" field.
func (m *ArticleMutation) AddFavoriteCount(i int) {
	if m.addfavoriteCount != nil {
		*m.addfavoriteCount += i
	} else {
		m.addfavoriteCount = &i
	}
}

// AddedFavoriteCount returns the value that was added to the "favoriteCount" field in this mutation.
func (m *ArticleMutation) AddedFavoriteCount() (r int, exists bool) {
	v := m.addfavoriteCount
	if v == nil {
		return
	}
	return *v, true
}

// ResetFavoriteCount resets all changes to the "favoriteCount" field.
func (m *ArticleMutation) ResetFavoriteCount() {
	m.favoriteCount = nil
	m.addfavoriteCount = nil
}

// SetArticleAuthorID sets the "articleAuthor" edge to the User entity by id.
func (m *ArticleMutation) SetArticleAuthorID(id int) {
	m.articleAuthor = &id
}

// ClearArticleAuthor clears the "articleAuthor" edge to the User entity.
func (m *ArticleMutation) ClearArticleAuthor() {
	m.clearedarticleAuthor = true
}

// ArticleAuthorCleared reports if the "articleAuthor" edge to the User entity was cleared.
func (m *ArticleMutation) ArticleAuthorCleared() bool {
	return m.clearedarticleAuthor
}

// ArticleAuthorID returns the "articleAuthor" edge ID in the mutation.
func (m *ArticleMutation) ArticleAuthorID() (id int, exists bool) {
	if m.articleAuthor != nil {
		return *m.articleAuthor, true
	}
	return
}

// ArticleAuthorIDs returns the "articleAuthor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArticleAuthorID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) ArticleAuthorIDs() (ids []int) {
	if id := m.articleAuthor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArticleAuthor resets all changes to the "articleAuthor" edge.
func (m *ArticleMutation) ResetArticleAuthor() {
	m.articleAuthor = nil
	m.clearedarticleAuthor = false
}

// AddFavoritedIDs adds the "favorited" edge to the User entity by ids.
func (m *ArticleMutation) AddFavoritedIDs(ids ...int) {
	if m.favorited == nil {
		m.favorited = make(map[int]struct{})
	}
	for i := range ids {
		m.favorited[ids[i]] = struct{}{}
	}
}

// ClearFavorited clears the "favorited" edge to the User entity.
func (m *ArticleMutation) ClearFavorited() {
	m.clearedfavorited = true
}

// FavoritedCleared reports if the "favorited" edge to the User entity was cleared.
func (m *ArticleMutation) FavoritedCleared() bool {
	return m.clearedfavorited
}

// RemoveFavoritedIDs removes the "favorited" edge to the User entity by IDs.
func (m *ArticleMutation) RemoveFavoritedIDs(ids ...int) {
	if m.removedfavorited == nil {
		m.removedfavorited = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.favorited, ids[i])
		m.removedfavorited[ids[i]] = struct{}{}
	}
}

// RemovedFavorited returns the removed IDs of the "favorited" edge to the User entity.
func (m *ArticleMutation) RemovedFavoritedIDs() (ids []int) {
	for id := range m.removedfavorited {
		ids = append(ids, id)
	}
	return
}

// FavoritedIDs returns the "favorited" edge IDs in the mutation.
func (m *ArticleMutation) FavoritedIDs() (ids []int) {
	for id := range m.favorited {
		ids = append(ids, id)
	}
	return
}

// ResetFavorited resets all changes to the "favorited" edge.
func (m *ArticleMutation) ResetFavorited() {
	m.favorited = nil
	m.clearedfavorited = false
	m.removedfavorited = nil
}

// AddArticleCommentIDs adds the "articleComments" edge to the Comment entity by ids.
func (m *ArticleMutation) AddArticleCommentIDs(ids ...int) {
	if m.articleComments == nil {
		m.articleComments = make(map[int]struct{})
	}
	for i := range ids {
		m.articleComments[ids[i]] = struct{}{}
	}
}

// ClearArticleComments clears the "articleComments" edge to the Comment entity.
func (m *ArticleMutation) ClearArticleComments() {
	m.clearedarticleComments = true
}

// ArticleCommentsCleared reports if the "articleComments" edge to the Comment entity was cleared.
func (m *ArticleMutation) ArticleCommentsCleared() bool {
	return m.clearedarticleComments
}

// RemoveArticleCommentIDs removes the "articleComments" edge to the Comment entity by IDs.
func (m *ArticleMutation) RemoveArticleCommentIDs(ids ...int) {
	if m.removedarticleComments == nil {
		m.removedarticleComments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.articleComments, ids[i])
		m.removedarticleComments[ids[i]] = struct{}{}
	}
}

// RemovedArticleComments returns the removed IDs of the "articleComments" edge to the Comment entity.
func (m *ArticleMutation) RemovedArticleCommentsIDs() (ids []int) {
	for id := range m.removedarticleComments {
		ids = append(ids, id)
	}
	return
}

// ArticleCommentsIDs returns the "articleComments" edge IDs in the mutation.
func (m *ArticleMutation) ArticleCommentsIDs() (ids []int) {
	for id := range m.articleComments {
		ids = append(ids, id)
	}
	return
}

// ResetArticleComments resets all changes to the "articleComments" edge.
func (m *ArticleMutation) ResetArticleComments() {
	m.articleComments = nil
	m.clearedarticleComments = false
	m.removedarticleComments = nil
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *ArticleMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *ArticleMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *ArticleMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *ArticleMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *ArticleMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *ArticleMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *ArticleMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.slug != nil {
		fields = append(fields, article.FieldSlug)
	}
	if m.title != nil {
		fields = append(fields, article.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, article.FieldDescription)
	}
	if m.body != nil {
		fields = append(fields, article.FieldBody)
	}
	if m.createdAt != nil {
		fields = append(fields, article.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, article.FieldUpdatedAt)
	}
	if m.favoriteCount != nil {
		fields = append(fields, article.FieldFavoriteCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldSlug:
		return m.Slug()
	case article.FieldTitle:
		return m.Title()
	case article.FieldDescription:
		return m.Description()
	case article.FieldBody:
		return m.Body()
	case article.FieldCreatedAt:
		return m.CreatedAt()
	case article.FieldUpdatedAt:
		return m.UpdatedAt()
	case article.FieldFavoriteCount:
		return m.FavoriteCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldSlug:
		return m.OldSlug(ctx)
	case article.FieldTitle:
		return m.OldTitle(ctx)
	case article.FieldDescription:
		return m.OldDescription(ctx)
	case article.FieldBody:
		return m.OldBody(ctx)
	case article.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case article.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case article.FieldFavoriteCount:
		return m.OldFavoriteCount(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case article.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case article.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case article.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case article.FieldCreatedAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case article.FieldUpdatedAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case article.FieldFavoriteCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFavoriteCount(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	var fields []string
	if m.addfavoriteCount != nil {
		fields = append(fields, article.FieldFavoriteCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case article.FieldFavoriteCount:
		return m.AddedFavoriteCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case article.FieldFavoriteCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFavoriteCount(v)
		return nil
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldSlug:
		m.ResetSlug()
		return nil
	case article.FieldTitle:
		m.ResetTitle()
		return nil
	case article.FieldDescription:
		m.ResetDescription()
		return nil
	case article.FieldBody:
		m.ResetBody()
		return nil
	case article.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case article.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case article.FieldFavoriteCount:
		m.ResetFavoriteCount()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.articleAuthor != nil {
		edges = append(edges, article.EdgeArticleAuthor)
	}
	if m.favorited != nil {
		edges = append(edges, article.EdgeFavorited)
	}
	if m.articleComments != nil {
		edges = append(edges, article.EdgeArticleComments)
	}
	if m.tags != nil {
		edges = append(edges, article.EdgeTags)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeArticleAuthor:
		if id := m.articleAuthor; id != nil {
			return []ent.Value{*id}
		}
	case article.EdgeFavorited:
		ids := make([]ent.Value, 0, len(m.favorited))
		for id := range m.favorited {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeArticleComments:
		ids := make([]ent.Value, 0, len(m.articleComments))
		for id := range m.articleComments {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedfavorited != nil {
		edges = append(edges, article.EdgeFavorited)
	}
	if m.removedarticleComments != nil {
		edges = append(edges, article.EdgeArticleComments)
	}
	if m.removedtags != nil {
		edges = append(edges, article.EdgeTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeFavorited:
		ids := make([]ent.Value, 0, len(m.removedfavorited))
		for id := range m.removedfavorited {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeArticleComments:
		ids := make([]ent.Value, 0, len(m.removedarticleComments))
		for id := range m.removedarticleComments {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedarticleAuthor {
		edges = append(edges, article.EdgeArticleAuthor)
	}
	if m.clearedfavorited {
		edges = append(edges, article.EdgeFavorited)
	}
	if m.clearedarticleComments {
		edges = append(edges, article.EdgeArticleComments)
	}
	if m.clearedtags {
		edges = append(edges, article.EdgeTags)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case article.EdgeArticleAuthor:
		return m.clearedarticleAuthor
	case article.EdgeFavorited:
		return m.clearedfavorited
	case article.EdgeArticleComments:
		return m.clearedarticleComments
	case article.EdgeTags:
		return m.clearedtags
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	switch name {
	case article.EdgeArticleAuthor:
		m.ClearArticleAuthor()
		return nil
	}
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	switch name {
	case article.EdgeArticleAuthor:
		m.ResetArticleAuthor()
		return nil
	case article.EdgeFavorited:
		m.ResetFavorited()
		return nil
	case article.EdgeArticleComments:
		m.ResetArticleComments()
		return nil
	case article.EdgeTags:
		m.ResetTags()
		return nil
	}
	return fmt.Errorf("unknown Article edge %s", name)
}

// CommentMutation represents an operation that mutates the Comment nodes in the graph.
type CommentMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	createdAt             *string
	updatedAt             *string
	body                  *string
	clearedFields         map[string]struct{}
	commentAuthor         *int
	clearedcommentAuthor  bool
	commentArticle        *int
	clearedcommentArticle bool
	done                  bool
	oldValue              func(context.Context) (*Comment, error)
	predicates            []predicate.Comment
}

var _ ent.Mutation = (*CommentMutation)(nil)

// commentOption allows management of the mutation configuration using functional options.
type commentOption func(*CommentMutation)

// newCommentMutation creates new mutation for the Comment entity.
func newCommentMutation(c config, op Op, opts ...commentOption) *CommentMutation {
	m := &CommentMutation{
		config:        c,
		op:            op,
		typ:           TypeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentID sets the ID field of the mutation.
func withCommentID(id int) commentOption {
	return func(m *CommentMutation) {
		var (
			err   error
			once  sync.Once
			value *Comment
		)
		m.oldValue = func(ctx context.Context) (*Comment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComment sets the old Comment of the mutation.
func withComment(node *Comment) commentOption {
	return func(m *CommentMutation) {
		m.oldValue = func(context.Context) (*Comment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Comment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "createdAt" field.
func (m *CommentMutation) SetCreatedAt(s string) {
	m.createdAt = &s
}

// CreatedAt returns the value of the "createdAt" field in the mutation.
func (m *CommentMutation) CreatedAt() (r string, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "createdAt" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldCreatedAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "createdAt" field.
func (m *CommentMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the "updatedAt" field.
func (m *CommentMutation) SetUpdatedAt(s string) {
	m.updatedAt = &s
}

// UpdatedAt returns the value of the "updatedAt" field in the mutation.
func (m *CommentMutation) UpdatedAt() (r string, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updatedAt" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldUpdatedAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updatedAt" field.
func (m *CommentMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// SetBody sets the "body" field.
func (m *CommentMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *CommentMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *CommentMutation) ResetBody() {
	m.body = nil
}

// SetCommentAuthorID sets the "commentAuthor" edge to the User entity by id.
func (m *CommentMutation) SetCommentAuthorID(id int) {
	m.commentAuthor = &id
}

// ClearCommentAuthor clears the "commentAuthor" edge to the User entity.
func (m *CommentMutation) ClearCommentAuthor() {
	m.clearedcommentAuthor = true
}

// CommentAuthorCleared reports if the "commentAuthor" edge to the User entity was cleared.
func (m *CommentMutation) CommentAuthorCleared() bool {
	return m.clearedcommentAuthor
}

// CommentAuthorID returns the "commentAuthor" edge ID in the mutation.
func (m *CommentMutation) CommentAuthorID() (id int, exists bool) {
	if m.commentAuthor != nil {
		return *m.commentAuthor, true
	}
	return
}

// CommentAuthorIDs returns the "commentAuthor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommentAuthorID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) CommentAuthorIDs() (ids []int) {
	if id := m.commentAuthor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCommentAuthor resets all changes to the "commentAuthor" edge.
func (m *CommentMutation) ResetCommentAuthor() {
	m.commentAuthor = nil
	m.clearedcommentAuthor = false
}

// SetCommentArticleID sets the "commentArticle" edge to the Article entity by id.
func (m *CommentMutation) SetCommentArticleID(id int) {
	m.commentArticle = &id
}

// ClearCommentArticle clears the "commentArticle" edge to the Article entity.
func (m *CommentMutation) ClearCommentArticle() {
	m.clearedcommentArticle = true
}

// CommentArticleCleared reports if the "commentArticle" edge to the Article entity was cleared.
func (m *CommentMutation) CommentArticleCleared() bool {
	return m.clearedcommentArticle
}

// CommentArticleID returns the "commentArticle" edge ID in the mutation.
func (m *CommentMutation) CommentArticleID() (id int, exists bool) {
	if m.commentArticle != nil {
		return *m.commentArticle, true
	}
	return
}

// CommentArticleIDs returns the "commentArticle" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommentArticleID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) CommentArticleIDs() (ids []int) {
	if id := m.commentArticle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCommentArticle resets all changes to the "commentArticle" edge.
func (m *CommentMutation) ResetCommentArticle() {
	m.commentArticle = nil
	m.clearedcommentArticle = false
}

// Where appends a list predicates to the CommentMutation builder.
func (m *CommentMutation) Where(ps ...predicate.Comment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Comment).
func (m *CommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.createdAt != nil {
		fields = append(fields, comment.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, comment.FieldUpdatedAt)
	}
	if m.body != nil {
		fields = append(fields, comment.FieldBody)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldCreatedAt:
		return m.CreatedAt()
	case comment.FieldUpdatedAt:
		return m.UpdatedAt()
	case comment.FieldBody:
		return m.Body()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case comment.FieldBody:
		return m.OldBody(ctx)
	}
	return nil, fmt.Errorf("unknown Comment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comment.FieldCreatedAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comment.FieldUpdatedAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case comment.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Comment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Comment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMutation) ResetField(name string) error {
	switch name {
	case comment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case comment.FieldBody:
		m.ResetBody()
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.commentAuthor != nil {
		edges = append(edges, comment.EdgeCommentAuthor)
	}
	if m.commentArticle != nil {
		edges = append(edges, comment.EdgeCommentArticle)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeCommentAuthor:
		if id := m.commentAuthor; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeCommentArticle:
		if id := m.commentArticle; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcommentAuthor {
		edges = append(edges, comment.EdgeCommentAuthor)
	}
	if m.clearedcommentArticle {
		edges = append(edges, comment.EdgeCommentArticle)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMutation) EdgeCleared(name string) bool {
	switch name {
	case comment.EdgeCommentAuthor:
		return m.clearedcommentAuthor
	case comment.EdgeCommentArticle:
		return m.clearedcommentArticle
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMutation) ClearEdge(name string) error {
	switch name {
	case comment.EdgeCommentAuthor:
		m.ClearCommentAuthor()
		return nil
	case comment.EdgeCommentArticle:
		m.ClearCommentArticle()
		return nil
	}
	return fmt.Errorf("unknown Comment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMutation) ResetEdge(name string) error {
	switch name {
	case comment.EdgeCommentAuthor:
		m.ResetCommentAuthor()
		return nil
	case comment.EdgeCommentArticle:
		m.ResetCommentArticle()
		return nil
	}
	return fmt.Errorf("unknown Comment edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op                Op
	typ               string
	id                *int
	tagStr            *string
	clearedFields     map[string]struct{}
	tagArticle        map[int]struct{}
	removedtagArticle map[int]struct{}
	clearedtagArticle bool
	done              bool
	oldValue          func(context.Context) (*Tag, error)
	predicates        []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTagStr sets the "tagStr" field.
func (m *TagMutation) SetTagStr(s string) {
	m.tagStr = &s
}

// TagStr returns the value of the "tagStr" field in the mutation.
func (m *TagMutation) TagStr() (r string, exists bool) {
	v := m.tagStr
	if v == nil {
		return
	}
	return *v, true
}

// OldTagStr returns the old "tagStr" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldTagStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTagStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTagStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTagStr: %w", err)
	}
	return oldValue.TagStr, nil
}

// ResetTagStr resets all changes to the "tagStr" field.
func (m *TagMutation) ResetTagStr() {
	m.tagStr = nil
}

// AddTagArticleIDs adds the "tagArticle" edge to the Article entity by ids.
func (m *TagMutation) AddTagArticleIDs(ids ...int) {
	if m.tagArticle == nil {
		m.tagArticle = make(map[int]struct{})
	}
	for i := range ids {
		m.tagArticle[ids[i]] = struct{}{}
	}
}

// ClearTagArticle clears the "tagArticle" edge to the Article entity.
func (m *TagMutation) ClearTagArticle() {
	m.clearedtagArticle = true
}

// TagArticleCleared reports if the "tagArticle" edge to the Article entity was cleared.
func (m *TagMutation) TagArticleCleared() bool {
	return m.clearedtagArticle
}

// RemoveTagArticleIDs removes the "tagArticle" edge to the Article entity by IDs.
func (m *TagMutation) RemoveTagArticleIDs(ids ...int) {
	if m.removedtagArticle == nil {
		m.removedtagArticle = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tagArticle, ids[i])
		m.removedtagArticle[ids[i]] = struct{}{}
	}
}

// RemovedTagArticle returns the removed IDs of the "tagArticle" edge to the Article entity.
func (m *TagMutation) RemovedTagArticleIDs() (ids []int) {
	for id := range m.removedtagArticle {
		ids = append(ids, id)
	}
	return
}

// TagArticleIDs returns the "tagArticle" edge IDs in the mutation.
func (m *TagMutation) TagArticleIDs() (ids []int) {
	for id := range m.tagArticle {
		ids = append(ids, id)
	}
	return
}

// ResetTagArticle resets all changes to the "tagArticle" edge.
func (m *TagMutation) ResetTagArticle() {
	m.tagArticle = nil
	m.clearedtagArticle = false
	m.removedtagArticle = nil
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.tagStr != nil {
		fields = append(fields, tag.FieldTagStr)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldTagStr:
		return m.TagStr()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldTagStr:
		return m.OldTagStr(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldTagStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTagStr(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldTagStr:
		m.ResetTagStr()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tagArticle != nil {
		edges = append(edges, tag.EdgeTagArticle)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeTagArticle:
		ids := make([]ent.Value, 0, len(m.tagArticle))
		for id := range m.tagArticle {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtagArticle != nil {
		edges = append(edges, tag.EdgeTagArticle)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeTagArticle:
		ids := make([]ent.Value, 0, len(m.removedtagArticle))
		for id := range m.removedtagArticle {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtagArticle {
		edges = append(edges, tag.EdgeTagArticle)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeTagArticle:
		return m.clearedtagArticle
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeTagArticle:
		m.ResetTagArticle()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	email             *string
	username          *string
	bio               *string
	image             *string
	clearedFields     map[string]struct{}
	followers         map[int]struct{}
	removedfollowers  map[int]struct{}
	clearedfollowers  bool
	following         map[int]struct{}
	removedfollowing  map[int]struct{}
	clearedfollowing  bool
	favorite          map[int]struct{}
	removedfavorite   map[int]struct{}
	clearedfavorite   bool
	myComments        map[int]struct{}
	removedmyComments map[int]struct{}
	clearedmyComments bool
	articles          map[int]struct{}
	removedarticles   map[int]struct{}
	clearedarticles   bool
	done              bool
	oldValue          func(context.Context) (*User, error)
	predicates        []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetBio sets the "bio" field.
func (m *UserMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *UserMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ResetBio resets all changes to the "bio" field.
func (m *UserMutation) ResetBio() {
	m.bio = nil
}

// SetImage sets the "image" field.
func (m *UserMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *UserMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *UserMutation) ResetImage() {
	m.image = nil
}

// AddFollowerIDs adds the "followers" edge to the User entity by ids.
func (m *UserMutation) AddFollowerIDs(ids ...int) {
	if m.followers == nil {
		m.followers = make(map[int]struct{})
	}
	for i := range ids {
		m.followers[ids[i]] = struct{}{}
	}
}

// ClearFollowers clears the "followers" edge to the User entity.
func (m *UserMutation) ClearFollowers() {
	m.clearedfollowers = true
}

// FollowersCleared reports if the "followers" edge to the User entity was cleared.
func (m *UserMutation) FollowersCleared() bool {
	return m.clearedfollowers
}

// RemoveFollowerIDs removes the "followers" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowerIDs(ids ...int) {
	if m.removedfollowers == nil {
		m.removedfollowers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.followers, ids[i])
		m.removedfollowers[ids[i]] = struct{}{}
	}
}

// RemovedFollowers returns the removed IDs of the "followers" edge to the User entity.
func (m *UserMutation) RemovedFollowersIDs() (ids []int) {
	for id := range m.removedfollowers {
		ids = append(ids, id)
	}
	return
}

// FollowersIDs returns the "followers" edge IDs in the mutation.
func (m *UserMutation) FollowersIDs() (ids []int) {
	for id := range m.followers {
		ids = append(ids, id)
	}
	return
}

// ResetFollowers resets all changes to the "followers" edge.
func (m *UserMutation) ResetFollowers() {
	m.followers = nil
	m.clearedfollowers = false
	m.removedfollowers = nil
}

// AddFollowingIDs adds the "following" edge to the User entity by ids.
func (m *UserMutation) AddFollowingIDs(ids ...int) {
	if m.following == nil {
		m.following = make(map[int]struct{})
	}
	for i := range ids {
		m.following[ids[i]] = struct{}{}
	}
}

// ClearFollowing clears the "following" edge to the User entity.
func (m *UserMutation) ClearFollowing() {
	m.clearedfollowing = true
}

// FollowingCleared reports if the "following" edge to the User entity was cleared.
func (m *UserMutation) FollowingCleared() bool {
	return m.clearedfollowing
}

// RemoveFollowingIDs removes the "following" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowingIDs(ids ...int) {
	if m.removedfollowing == nil {
		m.removedfollowing = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.following, ids[i])
		m.removedfollowing[ids[i]] = struct{}{}
	}
}

// RemovedFollowing returns the removed IDs of the "following" edge to the User entity.
func (m *UserMutation) RemovedFollowingIDs() (ids []int) {
	for id := range m.removedfollowing {
		ids = append(ids, id)
	}
	return
}

// FollowingIDs returns the "following" edge IDs in the mutation.
func (m *UserMutation) FollowingIDs() (ids []int) {
	for id := range m.following {
		ids = append(ids, id)
	}
	return
}

// ResetFollowing resets all changes to the "following" edge.
func (m *UserMutation) ResetFollowing() {
	m.following = nil
	m.clearedfollowing = false
	m.removedfollowing = nil
}

// AddFavoriteIDs adds the "favorite" edge to the Article entity by ids.
func (m *UserMutation) AddFavoriteIDs(ids ...int) {
	if m.favorite == nil {
		m.favorite = make(map[int]struct{})
	}
	for i := range ids {
		m.favorite[ids[i]] = struct{}{}
	}
}

// ClearFavorite clears the "favorite" edge to the Article entity.
func (m *UserMutation) ClearFavorite() {
	m.clearedfavorite = true
}

// FavoriteCleared reports if the "favorite" edge to the Article entity was cleared.
func (m *UserMutation) FavoriteCleared() bool {
	return m.clearedfavorite
}

// RemoveFavoriteIDs removes the "favorite" edge to the Article entity by IDs.
func (m *UserMutation) RemoveFavoriteIDs(ids ...int) {
	if m.removedfavorite == nil {
		m.removedfavorite = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.favorite, ids[i])
		m.removedfavorite[ids[i]] = struct{}{}
	}
}

// RemovedFavorite returns the removed IDs of the "favorite" edge to the Article entity.
func (m *UserMutation) RemovedFavoriteIDs() (ids []int) {
	for id := range m.removedfavorite {
		ids = append(ids, id)
	}
	return
}

// FavoriteIDs returns the "favorite" edge IDs in the mutation.
func (m *UserMutation) FavoriteIDs() (ids []int) {
	for id := range m.favorite {
		ids = append(ids, id)
	}
	return
}

// ResetFavorite resets all changes to the "favorite" edge.
func (m *UserMutation) ResetFavorite() {
	m.favorite = nil
	m.clearedfavorite = false
	m.removedfavorite = nil
}

// AddMyCommentIDs adds the "myComments" edge to the Comment entity by ids.
func (m *UserMutation) AddMyCommentIDs(ids ...int) {
	if m.myComments == nil {
		m.myComments = make(map[int]struct{})
	}
	for i := range ids {
		m.myComments[ids[i]] = struct{}{}
	}
}

// ClearMyComments clears the "myComments" edge to the Comment entity.
func (m *UserMutation) ClearMyComments() {
	m.clearedmyComments = true
}

// MyCommentsCleared reports if the "myComments" edge to the Comment entity was cleared.
func (m *UserMutation) MyCommentsCleared() bool {
	return m.clearedmyComments
}

// RemoveMyCommentIDs removes the "myComments" edge to the Comment entity by IDs.
func (m *UserMutation) RemoveMyCommentIDs(ids ...int) {
	if m.removedmyComments == nil {
		m.removedmyComments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.myComments, ids[i])
		m.removedmyComments[ids[i]] = struct{}{}
	}
}

// RemovedMyComments returns the removed IDs of the "myComments" edge to the Comment entity.
func (m *UserMutation) RemovedMyCommentsIDs() (ids []int) {
	for id := range m.removedmyComments {
		ids = append(ids, id)
	}
	return
}

// MyCommentsIDs returns the "myComments" edge IDs in the mutation.
func (m *UserMutation) MyCommentsIDs() (ids []int) {
	for id := range m.myComments {
		ids = append(ids, id)
	}
	return
}

// ResetMyComments resets all changes to the "myComments" edge.
func (m *UserMutation) ResetMyComments() {
	m.myComments = nil
	m.clearedmyComments = false
	m.removedmyComments = nil
}

// AddArticleIDs adds the "articles" edge to the Article entity by ids.
func (m *UserMutation) AddArticleIDs(ids ...int) {
	if m.articles == nil {
		m.articles = make(map[int]struct{})
	}
	for i := range ids {
		m.articles[ids[i]] = struct{}{}
	}
}

// ClearArticles clears the "articles" edge to the Article entity.
func (m *UserMutation) ClearArticles() {
	m.clearedarticles = true
}

// ArticlesCleared reports if the "articles" edge to the Article entity was cleared.
func (m *UserMutation) ArticlesCleared() bool {
	return m.clearedarticles
}

// RemoveArticleIDs removes the "articles" edge to the Article entity by IDs.
func (m *UserMutation) RemoveArticleIDs(ids ...int) {
	if m.removedarticles == nil {
		m.removedarticles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.articles, ids[i])
		m.removedarticles[ids[i]] = struct{}{}
	}
}

// RemovedArticles returns the removed IDs of the "articles" edge to the Article entity.
func (m *UserMutation) RemovedArticlesIDs() (ids []int) {
	for id := range m.removedarticles {
		ids = append(ids, id)
	}
	return
}

// ArticlesIDs returns the "articles" edge IDs in the mutation.
func (m *UserMutation) ArticlesIDs() (ids []int) {
	for id := range m.articles {
		ids = append(ids, id)
	}
	return
}

// ResetArticles resets all changes to the "articles" edge.
func (m *UserMutation) ResetArticles() {
	m.articles = nil
	m.clearedarticles = false
	m.removedarticles = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.bio != nil {
		fields = append(fields, user.FieldBio)
	}
	if m.image != nil {
		fields = append(fields, user.FieldImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldUsername:
		return m.Username()
	case user.FieldBio:
		return m.Bio()
	case user.FieldImage:
		return m.Image()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldBio:
		return m.OldBio(ctx)
	case user.FieldImage:
		return m.OldImage(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case user.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldBio:
		m.ResetBio()
		return nil
	case user.FieldImage:
		m.ResetImage()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.followers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.following != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.favorite != nil {
		edges = append(edges, user.EdgeFavorite)
	}
	if m.myComments != nil {
		edges = append(edges, user.EdgeMyComments)
	}
	if m.articles != nil {
		edges = append(edges, user.EdgeArticles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.followers))
		for id := range m.followers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.following))
		for id := range m.following {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavorite:
		ids := make([]ent.Value, 0, len(m.favorite))
		for id := range m.favorite {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMyComments:
		ids := make([]ent.Value, 0, len(m.myComments))
		for id := range m.myComments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.articles))
		for id := range m.articles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedfollowers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.removedfollowing != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.removedfavorite != nil {
		edges = append(edges, user.EdgeFavorite)
	}
	if m.removedmyComments != nil {
		edges = append(edges, user.EdgeMyComments)
	}
	if m.removedarticles != nil {
		edges = append(edges, user.EdgeArticles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.removedfollowers))
		for id := range m.removedfollowers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.removedfollowing))
		for id := range m.removedfollowing {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavorite:
		ids := make([]ent.Value, 0, len(m.removedfavorite))
		for id := range m.removedfavorite {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMyComments:
		ids := make([]ent.Value, 0, len(m.removedmyComments))
		for id := range m.removedmyComments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.removedarticles))
		for id := range m.removedarticles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedfollowers {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.clearedfollowing {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.clearedfavorite {
		edges = append(edges, user.EdgeFavorite)
	}
	if m.clearedmyComments {
		edges = append(edges, user.EdgeMyComments)
	}
	if m.clearedarticles {
		edges = append(edges, user.EdgeArticles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFollowers:
		return m.clearedfollowers
	case user.EdgeFollowing:
		return m.clearedfollowing
	case user.EdgeFavorite:
		return m.clearedfavorite
	case user.EdgeMyComments:
		return m.clearedmyComments
	case user.EdgeArticles:
		return m.clearedarticles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFollowers:
		m.ResetFollowers()
		return nil
	case user.EdgeFollowing:
		m.ResetFollowing()
		return nil
	case user.EdgeFavorite:
		m.ResetFavorite()
		return nil
	case user.EdgeMyComments:
		m.ResetMyComments()
		return nil
	case user.EdgeArticles:
		m.ResetArticles()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
