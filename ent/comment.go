// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"testrealworld/ent/article"
	"testrealworld/ent/comment"
	"testrealworld/ent/user"

	"entgo.io/ent/dialect/sql"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt string `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt string `json:"updatedAt,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges                    CommentEdges `json:"edges"`
	article_article_comments *int
	user_my_comments         *int
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// CommentAuthor holds the value of the commentAuthor edge.
	CommentAuthor *User `json:"commentAuthor,omitempty"`
	// CommentArticle holds the value of the commentArticle edge.
	CommentArticle *Article `json:"commentArticle,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]*int
}

// CommentAuthorOrErr returns the CommentAuthor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) CommentAuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CommentAuthor == nil {
			// The edge commentAuthor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CommentAuthor, nil
	}
	return nil, &NotLoadedError{edge: "commentAuthor"}
}

// CommentArticleOrErr returns the CommentArticle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) CommentArticleOrErr() (*Article, error) {
	if e.loadedTypes[1] {
		if e.CommentArticle == nil {
			// The edge commentArticle was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: article.Label}
		}
		return e.CommentArticle, nil
	}
	return nil, &NotLoadedError{edge: "commentArticle"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			values[i] = new(sql.NullInt64)
		case comment.FieldCreatedAt, comment.FieldUpdatedAt, comment.FieldBody:
			values[i] = new(sql.NullString)
		case comment.ForeignKeys[0]: // article_article_comments
			values[i] = new(sql.NullInt64)
		case comment.ForeignKeys[1]: // user_my_comments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Comment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				c.CreatedAt = value.String
			}
		case comment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.String
			}
		case comment.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				c.Body = value.String
			}
		case comment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field article_article_comments", value)
			} else if value.Valid {
				c.article_article_comments = new(int)
				*c.article_article_comments = int(value.Int64)
			}
		case comment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_my_comments", value)
			} else if value.Valid {
				c.user_my_comments = new(int)
				*c.user_my_comments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCommentAuthor queries the "commentAuthor" edge of the Comment entity.
func (c *Comment) QueryCommentAuthor() *UserQuery {
	return (&CommentClient{config: c.config}).QueryCommentAuthor(c)
}

// QueryCommentArticle queries the "commentArticle" edge of the Comment entity.
func (c *Comment) QueryCommentArticle() *ArticleQuery {
	return (&CommentClient{config: c.config}).QueryCommentArticle(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return (&CommentClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(c.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(c.UpdatedAt)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(c.Body)
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment

func (c Comments) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
