// Code generated by ent, DO NOT EDIT.

package ent

import "context"

func (a *Article) ArticleAuthor(ctx context.Context) (*User, error) {
	result, err := a.Edges.ArticleAuthorOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryArticleAuthor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Article) Favorited(ctx context.Context) ([]*User, error) {
	result, err := a.Edges.FavoritedOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryFavorited().All(ctx)
	}
	return result, err
}

func (a *Article) ArticleComments(ctx context.Context) ([]*Comment, error) {
	result, err := a.Edges.ArticleCommentsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryArticleComments().All(ctx)
	}
	return result, err
}

func (a *Article) Tags(ctx context.Context) ([]*Tag, error) {
	result, err := a.Edges.TagsOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryTags().All(ctx)
	}
	return result, err
}

func (c *Comment) CommentAuthor(ctx context.Context) (*User, error) {
	result, err := c.Edges.CommentAuthorOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCommentAuthor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Comment) CommentArticle(ctx context.Context) (*Article, error) {
	result, err := c.Edges.CommentArticleOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCommentArticle().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tag) TagArticle(ctx context.Context) ([]*Article, error) {
	result, err := t.Edges.TagArticleOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTagArticle().All(ctx)
	}
	return result, err
}

func (u *User) Followers(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.FollowersOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollowers().All(ctx)
	}
	return result, err
}

func (u *User) Following(ctx context.Context) ([]*User, error) {
	result, err := u.Edges.FollowingOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFollowing().All(ctx)
	}
	return result, err
}

func (u *User) Favorite(ctx context.Context) ([]*Article, error) {
	result, err := u.Edges.FavoriteOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryFavorite().All(ctx)
	}
	return result, err
}

func (u *User) MyComments(ctx context.Context) ([]*Comment, error) {
	result, err := u.Edges.MyCommentsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryMyComments().All(ctx)
	}
	return result, err
}

func (u *User) Articles(ctx context.Context) ([]*Article, error) {
	result, err := u.Edges.ArticlesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryArticles().All(ctx)
	}
	return result, err
}
